//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DolomiteModel.EntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<ApiKey> ApiKeys { get; set; }
        public virtual DbSet<Art> Arts { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<AutoplaylistRule> AutoplaylistRules { get; set; }
        public virtual DbSet<Autoplaylist> Autoplaylists { get; set; }
        public virtual DbSet<AvailableQuality> AvailableQualities { get; set; }
        public virtual DbSet<Metadata> Metadatas { get; set; }
        public virtual DbSet<MetadataField> MetadataFields { get; set; }
        public virtual DbSet<Playlist> Playlists { get; set; }
        public virtual DbSet<PlaylistTrack> PlaylistTracks { get; set; }
        public virtual DbSet<Quality> Qualities { get; set; }
        public virtual DbSet<Rule> Rules { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<Track> Tracks { get; set; }
        public virtual DbSet<UserKey> UserKeys { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserSetting> UserSettings { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }
        public virtual DbSet<ErrorInfo> ErrorInfoes { get; set; }
    
        public virtual int DecrementPlaylistTrackOrder(Nullable<long> playlist, Nullable<int> position)
        {
            var playlistParameter = playlist.HasValue ?
                new ObjectParameter("playlist", playlist) :
                new ObjectParameter("playlist", typeof(long));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DecrementPlaylistTrackOrder", playlistParameter, positionParameter);
        }
    
        public virtual int DeleteAutoplaylist(Nullable<System.Guid> autoplaylistGuid)
        {
            var autoplaylistGuidParameter = autoplaylistGuid.HasValue ?
                new ObjectParameter("autoplaylistGuid", autoplaylistGuid) :
                new ObjectParameter("autoplaylistGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAutoplaylist", autoplaylistGuidParameter);
        }
    
        public virtual int DeletePlaylist(Nullable<System.Guid> playlistGuid)
        {
            var playlistGuidParameter = playlistGuid.HasValue ?
                new ObjectParameter("playlistGuid", playlistGuid) :
                new ObjectParameter("playlistGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePlaylist", playlistGuidParameter);
        }
    
        public virtual int DeleteTrack(Nullable<System.Guid> trackGuid)
        {
            var trackGuidParameter = trackGuid.HasValue ?
                new ObjectParameter("trackGuid", trackGuid) :
                new ObjectParameter("trackGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTrack", trackGuidParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> GetAndLockTopArtItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("GetAndLockTopArtItem");
        }
    
        public virtual ObjectResult<Nullable<long>> GetAndLockTopMetadataItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("GetAndLockTopMetadataItem");
        }
    
        public virtual ObjectResult<Nullable<long>> GetAndLockTopOnboardingItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("GetAndLockTopOnboardingItem");
        }
    
        public virtual int IncrementPlaylistTrackOrder(Nullable<long> playlist, Nullable<int> position)
        {
            var playlistParameter = playlist.HasValue ?
                new ObjectParameter("playlist", playlist) :
                new ObjectParameter("playlist", typeof(long));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncrementPlaylistTrackOrder", playlistParameter, positionParameter);
        }
    
        public virtual int ReleaseAndCompleteArtChange(Nullable<long> workItem)
        {
            var workItemParameter = workItem.HasValue ?
                new ObjectParameter("workItem", workItem) :
                new ObjectParameter("workItem", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReleaseAndCompleteArtChange", workItemParameter);
        }
    
        public virtual int ReleaseAndCompleteMetadataUpdate(Nullable<long> workItem)
        {
            var workItemParameter = workItem.HasValue ?
                new ObjectParameter("workItem", workItem) :
                new ObjectParameter("workItem", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReleaseAndCompleteMetadataUpdate", workItemParameter);
        }
    
        public virtual int ReleaseAndCompleteOnboardingItem(Nullable<long> workItem)
        {
            var workItemParameter = workItem.HasValue ?
                new ObjectParameter("workItem", workItem) :
                new ObjectParameter("workItem", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReleaseAndCompleteOnboardingItem", workItemParameter);
        }
    
        public virtual int ResetOnboardingStatus(Nullable<long> trackId)
        {
            var trackIdParameter = trackId.HasValue ?
                new ObjectParameter("trackId", trackId) :
                new ObjectParameter("trackId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetOnboardingStatus", trackIdParameter);
        }
    
        public virtual int SetTrackHash(Nullable<long> trackId, string hash)
        {
            var trackIdParameter = trackId.HasValue ?
                new ObjectParameter("trackId", trackId) :
                new ObjectParameter("trackId", typeof(long));
    
            var hashParameter = hash != null ?
                new ObjectParameter("hash", hash) :
                new ObjectParameter("hash", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetTrackHash", trackIdParameter, hashParameter);
        }
    
        public virtual int MarkTrackAsError(Nullable<long> trackId, string userError, string adminError)
        {
            var trackIdParameter = trackId.HasValue ?
                new ObjectParameter("trackId", trackId) :
                new ObjectParameter("trackId", typeof(long));
    
            var userErrorParameter = userError != null ?
                new ObjectParameter("userError", userError) :
                new ObjectParameter("userError", typeof(string));
    
            var adminErrorParameter = adminError != null ?
                new ObjectParameter("adminError", adminError) :
                new ObjectParameter("adminError", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkTrackAsError", trackIdParameter, userErrorParameter, adminErrorParameter);
        }
    }
}
